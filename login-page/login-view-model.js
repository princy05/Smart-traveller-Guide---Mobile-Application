"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var dialogs = require("tns-core-modules/ui/dialogs");
var Login_Page = /** @class */ (function (_super) {
    __extends(Login_Page, _super);
    function Login_Page() {
        var _this = _super.call(this) || this;
        // Initialize default values.
        _this._counter = 42;
        return _this;
    }
    Object.defineProperty(Login_Page.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (value) {
            if (this._message !== value) {
                this._message = value;
                this.notifyPropertyChange("message", value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Login_Page.prototype.onTap = function (args) {
        var page = args.object.page;
        var vm = page.bindingContext;
        page.frame.navigate("./Traveler_account/home-page");
    };
    Login_Page.prototype.makePostRequest = function (args) {
        var page = args.object.page;
        var vm = page.bindingContext;
        var num = 1;
        var a = 0;
        var email = vm.get("user");
        var password = vm.get("pass");
        // console.log(email);
        var regexp = new RegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i);
        var strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})");
        if (!email && !password) {
            num = 0;
            dialogs.alert("Both fields mandatory");
        }
        else if (!email) {
            dialogs.alert("Email cannot be empty");
            num = 0;
        }
        else if (email && !regexp.test(email)) {
            num = 0;
            dialogs.alert("Invalid email address.");
        }
        else if (!password) {
            num = 0;
            dialogs.alert("Password cannot be empty");
        }
        else if (password.length < 6) {
            num = 0;
            dialogs.alert("Password should be more than 6 characters ");
        }
        if (num == 1) {
            // >> fetch-post-ts
            fetch("http://ec2-18-218-173-14.us-east-2.compute.amazonaws.com:3000/user/login", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    email: vm.get("user"),
                    password: vm.get("pass")
                })
            }).then(function (r) { return r.json(); })
                .then(function (response) {
                var result = response;
                // >> (hide)
                if (result.message == "Auth successful") {
                    console.log("Even");
                    page.frame.navigate("./Traveler_account/home-page");
                }
                else {
                    console.log("Email not exists. Please Sign Up !!");
                    dialogs.alert("Email not exists. Please Sign Up !!").then(function () {
                    });
                }
                console.log(result);
            }).catch(function (e) {
                console.log("Error: ");
                console.log(e);
            });
        }
    };
    Login_Page.prototype.admin = function (args) {
        var page = args.object.page;
        var vm = page.bindingContext;
        var num = 1;
        var a = 0;
        var email = vm.get("user");
        var password = vm.get("pass");
        // console.log(email);
        var regexp = new RegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i);
        var strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})");
        if (!email) {
            dialogs.alert("Admin Email cannot be empty");
            num = 0;
        }
        else if (!password) {
            num = 0;
            dialogs.alert("Admin Password cannot be empty");
        }
        else if (!email && !password) {
            num = 0;
            dialogs.alert("Admin Email and password cannot be empty");
        }
        else if (email == "admin1@admin.com") {
            if (password == "admin") {
                page.frame.navigate("./admin/admin-page");
            }
            else {
                dialogs.alert("Admin Password incorrect");
            }
        }
        else {
            dialogs.alert("Admin Email is not correct");
        }
    };
    Login_Page.prototype.signup = function (args) {
        var page = args.object.page;
        var vm = page.bindingContext;
        page.frame.navigate("./signup/signup");
    };
    return Login_Page;
}(observable_1.Observable));
exports.Login_Page = Login_Page;
//# sourceMappingURL=data:application/json;base64,