"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dialogs = require("tns-core-modules/ui/dialogs");
var observable_1 = require("tns-core-modules/data/observable");
function onNavBtnTap(args) {
    var button = args.object;
    var page = button.page;
    page.frame.navigate("main-page");
}
exports.onNavBtnTap = onNavBtnTap;
function onNavigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("email", "");
    vm.set("password", "");
    vm.set("username", "");
    vm.set("prefer", "");
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function register(args) {
    var page = args.object.page;
    var vm = page.bindingContext;
    var num = 1;
    var email = vm.get("email");
    var password = vm.get("password");
    var password2 = vm.get("password2");
    var name = vm.get("username");
    // console.log(email);
    var regexp = new RegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i);
    var strongRegex = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})");
    if (!email) {
        num = 0;
        if (!name) {
            if (!password) {
                dialogs.alert("Email, Name,Password and Confirm Password required");
            }
            else {
                dialogs.login("Email and Name required");
            }
        }
        else {
            dialogs.login("Email required");
        }
    }
    else if (!name) {
        num = 0;
        if (!password) {
            dialogs.alert("Name,Password and Confirm Password required");
        }
        else {
            dialogs.login("Name required");
        }
    }
    else if (!password && !password2) {
        num = 0;
        dialogs.alert("Password and Confirm Password required");
    }
    else if (email && !regexp.test(email)) {
        num = 0;
        dialogs.alert("Invalid email format(e.g abc@gmail.com is valid)");
    }
    else if (password.length < 6) {
        num = 0;
        dialogs.alert("Password should be more than 6 characters");
    }
    else if (password != password2) {
        num = 0;
        dialogs.alert("Password and confirm password does not match");
    }
    if (num == 1) {
        // >> fetch-post-ts
        fetch("http://ec2-18-218-173-14.us-east-2.compute.amazonaws.com:3000/user/signup", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                email: vm.get("email"),
                password: vm.get("password"),
                name: vm.get("username"),
                preference: vm.get("prefer")
            })
        }).then(function (r) { return r.json(); })
            .then(function (response) {
            var result = response;
            // >> (hide)
            if (result.message == "User created") {
                dialogs.alert("User created").then(function () {
                    console.log("Dialog closed!");
                });
                // console.log("Even");
                page.frame.navigate("./login-page/login-page");
            }
            else {
                dialogs.alert("Email already registered").then(function () {
                    console.log("Dialog closed!");
                });
            }
            // << (hide)
        }).catch(function (e) {
            // >> (hide)
            console.log("Error: ");
            console.log(e);
            // << (hide)
        });
        // << fetch-post-ts
    }
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,